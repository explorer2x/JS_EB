if (document.domain.includes('principal.com')) { function input_refresh_react(tgt_el_id, val) { var evs = ['input', 'change', 'blur', 'focusout']; tgt_elg = document.querySelector(tgt_el_id); if (!tgt_elg) { return; } var ev = new Event('focusin', { bubbles: true }); ev.simulated = true; tgt_elg.dispatchEvent(ev); tgt_elg.value = val; for (var i = 0; i < evs.length; i++) { var ev = new Event(evs[i], { bubbles: true }); ev.simulated = true; tgt_elg.dispatchEvent(ev); } }; function delay(n) { return new Promise(function(resolve) { setTimeout(resolve, n * 50); }); }; function reivse_date(dateString) { const date = new Date(dateString); const formattedDate = date.toLocaleDateString('en-US', { month: 'numeric', day: 'numeric', year: 'numeric' }); return (formattedDate); } if (document.body.innerText.includes("Reason For Addition")) { var firstn = jsonObject.ee_BASIC_info['FIRST_NAME']; var lastn = jsonObject.ee_BASIC_info['LAST_NAME']; async function myAsyncFunction(firstn, lastn) { check_status = await check_ee_status(firstn, lastn); if (check_status == '') { alert('Employee ' + firstn + ' ' + lastn + ' not found! Could process!'); } else { alert('Employee checked! Status is ' + check_status); } if (check_status != 'Active') { input_refresh_react('#reasonForAdditionDropDown', "newHire"); await delay(1); var wrk_h = jsonObject.ee_BASIC_info['HOUR_PER_WEEK']; input_refresh_react('#addMemberReasonPanelHoursWorked', wrk_h); document.querySelector("#addMemberReasonAcknowledge > input[type=checkbox]").click(); } } async function check_ee_status(first_name, last_name) { var currentURL = window.location.href; var regex = /(\d+)\/(\d+)/; var match = currentURL.match(regex); if (match) { var value1 = match[1]; var value2 = match[2]; var url = "https://advisors-groupbenefits.principal.com/GroupBenefitsEmployerUI/proxy/GroupBenefitsEmployer/api/members/" + value1 + "/" + value2; } else { throw new Error("Digits not found in the URL."); } var memberStatus = ''; try { const response = await fetch(url); if (!response.ok) { throw new Error('Network response was not ok.'); } const data = await response.json(); data.forEach(item => { if (item.firstName.toLowerCase() === first_name.toLowerCase() && item.lastName.toLowerCase() === last_name.toLowerCase()) { memberStatus = item.memberStatus; } }); return memberStatus; } catch (error) { return 'An error occurred while making the request: ' + error; } } myAsyncFunction(firstn, lastn); }; if (document.body.innerText.includes("New Member Demographics")) { const dic = { "FIRST_NAME": "firstName", "MIDDLE_NAME": "middleName", "LAST_NAME": "lastName", "DOB": "dateOfBirth", "HOMEPHONE": "phoneNumber", "ADD1": "address", "ADD2": "addressLine2", "ADDCITY": "city", "ADDZIP": "zip", "DATE_OF_HIRE": "date_input" }; for (var keyv in dic) { var itemv = dic[keyv]; if (itemv != '') { if (itemv == "dateOfBirth" || itemv == "date_input") { g_dob = new Date(jsonObject.ee_BASIC_info[keyv]); input_refresh_react('input#' + itemv, getFormattedDate(g_dob)); }else if (itemv == "address" || itemv == "addressLine2"){ input_refresh_react('#' + itemv, jsonObject.ee_BASIC_info[keyv].replace(/[^\w\s]/gi, '')); } else { input_refresh_react('#' + itemv, jsonObject.ee_BASIC_info[keyv]); }; }; }; var sex_v = jsonObject.ee_BASIC_info['GENDER']; if (sex_v == 'F' || sex_v == 'Female') { sex_v = 'FEMALE'; } else if (sex_v == 'M' || sex_v == 'Male') { sex_v = 'MALE'; }; input_refresh_react('#gender', sex_v); var pemail = jsonObject.ee_BASIC_info['PERSONAL_EMAIL']; var wemail = jsonObject.ee_BASIC_info['WORK_EMAIL']; var t_email = pemail || wemail || ''; input_refresh_react('#email', t_email); async function myAsyncFunction() { await input_job(); await input_wage(); } async function input_wage() { tgt_elg = document.querySelector('#wage'); if (tgt_elg) { var ear_mode = jsonObject.ee_BASIC_info['PAY_PERIOD']; var ANNUAL_SALARY = jsonObject.ee_BASIC_info['ANNUAL_SALARY']; var HOURLY_SALARY = jsonObject.ee_BASIC_info['HOURLY_SALARY']; if (ear_mode == '' || ear_mode == 'ANNUAL' || ANNUAL_SALARY != '') { input_refresh_react("#wage", ANNUAL_SALARY); input_refresh_react("#wageFrequency", 'YEAR'); console.log('YEAR', ANNUAL_SALARY); } else { input_refresh_react("#wageFrequency", 'HOUR'); input_refresh_react("#wage", HOURLY_SALARY); } } } async function input_job() { var evs = ['input', 'change', 'blur']; tgt_elg = document.querySelector('#jobClassifications'); if (tgt_elg.childElementCount > 1) { tgt_elg.selectedIndex = '1'; for (var i = 0; i < evs.length; i++) { var ev = new Event(evs[i], { bubbles: true }); ev.simulated = true; tgt_elg.dispatchEvent(ev); } await delay(1); } }; myAsyncFunction(); prin_dept_dic = { "FIRST_NAME": "dependentFirstName0", "LAST_NAME": "dependentLastName0", "DOB": "dependentDateOfBirth0", }; function get_rel(rel_variableValue) { c_re_dic = { "SPOUSE": "SPOUSE", "COMMON-LAW SPOUSE": "COMMON LAW SPOUSE", "CIVIL UNION PARTNER": "CIVIL UNION PARTNER", "DOMESTIC PARTNER": "DOMESTIC PARTNER", "STATE REGISTERED DOMESTIC PARTNER": "STATE REGISTERED DOMESTIC PARTNER", "RECIPROCAL BENEFICIARY": "RECIPROCAL BENEFICIARY", "CHILD": "CHILD", "FOSTER CHILD": "FOSTER CHILD", "GRAND CHILD": "GRAND CHILD", "DISABLED CHILD": "HANDICAPPED CHILD", "NON TRADITIONAL CHILD": "NON TRADITIONAL CHILD", }; const c_re_map = { "CHILD": ["child", "child-domestic partner"], "DOMESTIC PARTNER": ["domestic partner"], "SPOUSE": ["spouse"], "FOSTER CHILD": ["child-adopted", "child-foster", "child-step", "child-legal guardian"], "GRAND CHILD": ["child-grandchild"], }; let result = ''; for (const key in c_re_map) { if (c_re_map[key].includes(rel_variableValue.toLowerCase())) { result = key; break; } }; return (c_re_dic[result]); } var dep_i = 0; async function add_dep() { if (jsonObject.ee_DEPT_info.Spouse.FIRST_NAME != "") { document.querySelector("#addDependentButtonTop").click(); await delay(1); for (var key in prin_dept_dic) { var itemv = prin_dept_dic[key]; if (itemv != '') { if (key == "DOB") { g_doh = new Date(jsonObject.ee_DEPT_info.Spouse[key]); input_refresh_react('input#' + itemv.replace('0', dep_i), getFormattedDate(g_doh)); } else { input_refresh_react('#' + itemv.replace('0', dep_i), jsonObject.ee_DEPT_info.Spouse[key]); }; }; }; var sex_v = jsonObject.ee_DEPT_info.Spouse['GENDER']; if (sex_v == 'F' || sex_v == 'Female') { sex_v = 'FEMALE'; } else if (sex_v == 'M' || sex_v == 'Male') { sex_v = 'MALE'; }; const spouse_gender = 'dependentGender0'; input_refresh_react('#' + spouse_gender.replace('0', dep_i), sex_v); const spouse_rel = 'dependentRelationship0'; var sp_rel = jsonObject.ee_DEPT_info.Spouse['RELATION']; if (sp_rel == '') { sp_rel = 'SPOUSE'; }; const sp_rel_conv = get_rel(sp_rel); if (sp_rel_conv == '') { input_refresh_react('#' + spouse_rel.replace('0', dep_i), "SPOUSE"); } else { input_refresh_react('#' + spouse_rel.replace('0', dep_i), sp_rel_conv); } jsonObject.ee_DEPT_info.Spouse.is_entered = "T"; dep_i++; }; if (jsonObject.ee_DEPT_info.Child.FIRST_NAME != "") { if (jsonObject.ee_DEPT_info.Child.FIRST_NAME.includes('|') == false) { if (jsonObject.ee_DEPT_info.Child.is_entered != "T") { document.querySelector("#addDependentButtonTop").click(); await delay(1); for (var key in prin_dept_dic) { var itemv = prin_dept_dic[key]; if (itemv != '') { if (key == "DOB") { g_doh = new Date(jsonObject.ee_DEPT_info.Child[key]); input_refresh_react('input#' + itemv.replace('0', dep_i), getFormattedDate(g_doh)); } else { input_refresh_react('#' + itemv.replace('0', dep_i), jsonObject.ee_DEPT_info.Child[key]); }; }; }; var sex_v = jsonObject.ee_DEPT_info.Child['GENDER']; if (sex_v == 'F' || sex_v == 'Female') { sex_v = 'FEMALE'; } else if (sex_v == 'M' || sex_v == 'Male') { sex_v = 'MALE'; }; const spouse_gender = 'dependentGender0'; input_refresh_react('#' + spouse_gender.replace('0', dep_i), sex_v); const spouse_rel = 'dependentRelationship0'; var sp_rel = jsonObject.ee_DEPT_info.Child['RELATION']; if (sp_rel == '') { sp_rel = 'Child'; }; const sp_rel_conv = get_rel(sp_rel); if (sp_rel_conv == '') { input_refresh_react('#' + spouse_rel.replace('0', dep_i), "CHILD"); } else { input_refresh_react('#' + spouse_rel.replace('0', dep_i), sp_rel_conv); } jsonObject.ee_DEPT_info.Child.is_entered = "T"; dep_i++; } } else { child_ct = jsonObject.ee_DEPT_info.Child.FIRST_NAME.split("|").length; for (var child_entered_ct = 0; child_entered_ct < child_ct; child_entered_ct++) { document.querySelector("#addDependentButtonTop").click(); await delay(1); for (var key in prin_dept_dic) { var itemv = prin_dept_dic[key]; if (itemv != '') { if (key == "DOB") { g_doh = new Date(jsonObject.ee_DEPT_info.Child[key].split("|")[child_entered_ct]); input_refresh_react('input#' + itemv.replace('0', dep_i), getFormattedDate(g_doh)); } else { input_refresh_react('#' + itemv.replace('0', dep_i), jsonObject.ee_DEPT_info.Child[key].split("|")[child_entered_ct]); }; }; }; var sex_v = jsonObject.ee_DEPT_info.Child['GENDER'].split("|")[child_entered_ct]; if (sex_v == 'F' || sex_v == 'Female') { sex_v = 'FEMALE'; } else if (sex_v == 'M' || sex_v == 'Male') { sex_v = 'MALE'; }; const spouse_gender = 'dependentGender0'; input_refresh_react('#' + spouse_gender.replace('0', dep_i), sex_v); const spouse_rel = 'dependentRelationship0'; var sp_rel = jsonObject.ee_DEPT_info.Child['RELATION']; if (sp_rel == '') { sp_rel = 'Child' } else { sp_rel = sp_rel.split("|")[child_entered_ct]; }; const sp_rel_conv = get_rel(sp_rel); if (sp_rel_conv == '') { input_refresh_react('#' + spouse_rel.replace('0', dep_i), "CHILD"); } else { input_refresh_react('#' + spouse_rel.replace('0', dep_i), sp_rel_conv); } if (child_entered_ct == 0) { jsonObject.ee_DEPT_info.Child.is_entered = "T"; } else { jsonObject.ee_DEPT_info.Child.is_entered = jsonObject.ee_DEPT_info.Child.is_entered + "|" + "T"; }; dep_i++ } }; }; }; add_dep(); } };
