javascript: const processedNames = [];
const processeditem = [];
var fetch_url = window.location.href + '/GetEventDetails';
if (fetch_url.includes("/Company/")) {
	var fetch_sec = 'Company';
} else {
	var fetch_sec = 'Broker';
};
async function get_wall_page() {
	var allPageTags = new Array();
	var allPageTags = document.getElementsByTagName("div");
	for (i = 0; i < allPageTags.length; i++)
		if (allPageTags[i].getAttribute('class') == 'material-card wall-listing event-wall') {
			const eventElement = allPageTags[i];
			const nameElement = eventElement.querySelector('.wall-icon-container a:first-child');
			const employeeElement = eventElement.querySelector('.wall-icon-container a[href="#goToEmployee"]');
			const eventReasonElement = eventElement.querySelector('.event-reason');
			const employeeDetailButton = eventElement.querySelector('.wall-icon-container a[href="#getEventDetails"]');
			const dateElement = eventElement.querySelector(".wall-icon-container span.icon-clock");
			const statusElement = eventElement.querySelector(".wall-icon-container span.icon-globe");
			const clientElement = eventElement.querySelector(".wall-icon-container a:first-child");
			const clientName = clientElement.textContent.trim();
			const date = dateElement.nextSibling.textContent.trim();
			const status = statusElement.nextSibling.textContent.trim();
			const name = nameElement.textContent.trim();
			const employee = employeeElement.textContent.trim();
			const eventReason = eventReasonElement.textContent.trim();
			caseid = eventElement.id.split("-")[2];
			if (fetch_sec == 'Broker') {
				wallFeedName = eventElement.querySelector(".wall-status-trey .wall-icon-container:nth-child(2)").textContent.trim();
			} else if (fetch_sec == "Company") {
				wallFeedName = clientName;
			}
			if (processedNames.includes(employee)) {
				const result = {
					Name: name,
					Employee: employee,
					EventReason: eventReason,
					IssueDate: date,
					IssueStatus: status
				};
				processeditem.push(JSON.stringify(result));
				continue;
			} else {
				processedNames.push(employee);
				check_status_json = await get_ee_details(caseid, wallFeedName);
				const result = {
					Name: name,
					Employee: employee,
					EventReason: eventReason,
					IssueDate: date,
					IssueStatus: status,
					EEJson: check_status_json
				};
				processeditem.push(JSON.stringify(result));
			}
		};
	const textContent = '[' + processeditem.join(',') + ']';
	let newClipboardString = JSON.stringify(JSON.parse(textContent));
	navigator.clipboard.writeText(newClipboardString);
};

function parse_json(js) {
	const ee_dic = {
		"FirstName": "FIRST_NAME",
		"LastName": "LAST_NAME",
		"MiddleName": "MIDDLE_NAME",
		"SSN": "SSN",
		"DOB": "DOB",
		"Gender": "GENDER",
		"MaritalStatus": "MARITAL_STATUS",
		"HomePhone": "HOMEPHONE",
		"WorkPhone": "WORKPHONE",
		"EmailAddress": "WORK_EMAIL",
		"HireDate": "DATE_OF_HIRE",
		"Salary": "ANNUAL_SALARY",
		"HoursPerWeek": "HOUR_PER_WEEK",
		"JobTitle": "JOB_TITLE"
	};
	const Address_dic = {
		"Address1": "ADD1",
		"Address2": "ADD2",
		"City": "ADDCITY",
		"State": "ADDSTATE",
		"Zip5": "ADDZIP",
	};
	const dept_dic = {
		"Spouse": {
			"FullName": "FULL_NAME",
			"FirstName": "FIRST_NAME",
			"MiddleName": "MIDDLE_NAME",
			"LastName": "LAST_NAME",
			"Relationship": "RELATION",
			"SSN": "SSN",
			"DOB": "DOB",
			"Gender": "GENDER",
			"IsDisabled": "IF_DISABLED",
		},
		"Child": {
			"FullName": "FULL_NAME",
			"FirstName": "FIRST_NAME",
			"MiddleName": "MIDDLE_NAME",
			"LastName": "LAST_NAME",
			"Relationship": "RELATION",
			"SSN": "SSN",
			"DOB": "DOB",
			"Gender": "GENDER",
			"IsDisabled": "IF_DISABLED",
		}
	};
	const extractData = (data, mapping) => {
		const extractedData = {};
		for (const [key, value] of Object.entries(mapping)) {
			if (key in data) {
				extractedData[value] = data[key];
			}
		}
		return extractedData;
	};
	const extractedEmployeeData = extractData(js.Directives.EventDetails.Employee, ee_dic);
	const extractedAddressData = extractData(js.Directives.EventDetails.Employee.HomeAddress, Address_dic);
	const extractedDepartmentData = {};
	for (const dependent of js.Directives.EventDetails.Dependents) {
		const departmentType = dependent.Relationship;
		if (departmentType in dept_dic) {
			if (!extractedDepartmentData[departmentType]) {
				extractedDepartmentData[departmentType] = [];
			}
			extractedDepartmentData[departmentType].push(extractData(dependent, dept_dic[departmentType]));
		}
	}
	const filledJson = {
		"ee_BASIC_info": {
			"COMPANY_NAME": "",
			"FULL_NAME": "",
			"FIRST_NAME": "",
			"MIDDLE_NAME": "",
			"LAST_NAME": "",
			"SSN": "",
			"DOB": "",
			"AGE": "",
			"GENDER": "",
			"MARITAL_STATUS": "",
			"ADD1": "",
			"ADD2": "",
			"ADDCITY": "",
			"ADDCOUNTY": "",
			"ADDSTATE": "",
			"ADDCOUNTRY": "",
			"ADDZIP": "",
			"HOMEPHONE": "",
			"WORKPHONE": "",
			"PERSONAL_EMAIL": "",
			"WORK_EMAIL": "",
			"ID": "",
			"DATE_OF_HIRE": "",
			"ELIG_DATE": "",
			"TERM_DATE": "",
			"TERM_REASON": "",
			"HOUR_PER_WEEK": "",
			"HOURLY_SALARY": "",
			"ANNUAL_SALARY": "",
			"FULL_PART_TIME": "",
			"PAY_PERIOD": "",
			"JOB_TITLE": "",
			"OFFICE": "",
			"DIVISION": "",
			"DEPARTMENT": ""
		},
		"ee_DEPT_info": {
			"Spouse": {
				"FULL_NAME": "",
				"FIRST_NAME": "",
				"MIDDLE_NAME": "",
				"LAST_NAME": "",
				"RELATION": "",
				"SSN": "",
				"DOB": "",
				"GENDER": "",
				"ADD1": "",
				"ADD2": "",
				"ADDCITY": "",
				"ADDCOUNTY": "",
				"ADDSTATE": "",
				"ADDCOUNTRY": "",
				"ADDZIP": "",
				"HOMEPHONE": "",
				"WORKPHONE": "",
				"PERSONAL_EMAIL": "",
				"WORK_EMAIL": "",
				"IF_DISABLED": "",
				"IF_FULLTIME": "",
				"IF_STUDENT": "",
				"is_entered": ""
			},
			"Child": {
				"FULL_NAME": "",
				"FIRST_NAME": "",
				"MIDDLE_NAME": "",
				"LAST_NAME": "",
				"RELATION": "",
				"SSN": "",
				"DOB": "",
				"GENDER": "",
				"ADD1": "",
				"ADD2": "",
				"ADDCITY": "",
				"ADDCOUNTY": "",
				"ADDSTATE": "",
				"ADDCOUNTRY": "",
				"ADDZIP": "",
				"HOMEPHONE": "",
				"WORKPHONE": "",
				"PERSONAL_EMAIL": "",
				"WORK_EMAIL": "",
				"IF_DISABLED": "",
				"IF_FULLTIME": "",
				"IF_STUDENT": "",
				"is_entered": ""
			}
		}
	};
	Object.assign(filledJson.ee_BASIC_info, extractedEmployeeData);
	Object.assign(filledJson.ee_BASIC_info, extractedAddressData);
	Object.assign(filledJson.ee_DEPT_info.Employee, extractedDepartmentData.Employee || {});
	if (extractedDepartmentData.Spouse && extractedDepartmentData.Spouse.length > 0) {
		Object.assign(filledJson.ee_DEPT_info.Spouse, extractedDepartmentData.Spouse[0]);
	}
	if (extractedDepartmentData.Child && extractedDepartmentData.Child.length > 0) {
		const combinedChildData = extractedDepartmentData.Child.reduce((result, childData) => {
			Object.keys(childData).forEach(key => {
				if (result[key]) {
					result[key] += `|${childData[key]}`;
				} else {
					result[key] = childData[key];
				}
			});
			return result;
		}, {});
		Object.assign(filledJson.ee_DEPT_info.Child, combinedChildData);
	}
	return filledJson;
}
async function get_ee_details(caseid, wallFeedName) {
	await delay(1);
	const data = {
		"wallListingId": caseid,
		"wallFeedName": wallFeedName
	};
	try {
		const response = await fetch(fetch_url, {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json; charset=utf-8'
			},
			body: JSON.stringify(data)
		});
		const responseData = await response.json();
		return parse_json(responseData);
	} catch (error) {
		console.error('Error:', error);
	}
}

function delay(n) {
	return new Promise(function(resolve) {
		setTimeout(resolve, n * 100);
	});
};
async function job() {
	await get_wall_page()
};
job();
