const jsonstr = ``;

var jsonobj = JSON.parse(jsonstr);

function evaluateKey(key) {
	if (key.endsWith("()")) {
		// Remove the parentheses to get the function name
		const functionName = key.slice(0, -2);
		// Check if such a function exists and is callable
		if (typeof window[functionName] === "function") {
			return window[functionName](); // Execute the function
		}
	}
	return key; // Return the key as is if not a function call
}


function SelectOptionByText(selectElement, text,Layer) {
	current_doc = eval(Layer);
	
	selectElement = current_doc.querySelector(selectElement);

	if (!selectElement) {
		console.error("Select element not found");
		return;
	}
	let options = selectElement.options;
	for (let i = 0; i < options.length; i++) {
		if (options[i].text === text) {
			selectElement.selectedIndex = i;
			break;
		}
	}
}

function InputValue(inputElement_selector, val,Layer) {

	current_doc = eval(Layer);
	console.log(Layer,current_doc);
	
	
    inputElement =current_doc.querySelector(inputElement_selector);
	if (!inputElement) {
		console.error("InputValue element not found");
		return;
	}

	inputElement.dispatchEvent(new Event('focusin'));
	inputElement.value = val;
	inputElement.dispatchEvent(new Event('input'));
	inputElement.dispatchEvent(new Event('change'));
	inputElement.dispatchEvent(new Event('blur'));
	inputElement.dispatchEvent(new Event('keyup'));

}

function SelectRadioButton(RadioElement_selector, val,Layer) {
	current_doc = eval(Layer);

	RadioElement = current_doc.querySelector(RadioElement_selector);
	
	if (!RadioElement) {
		console.error("InputValue element not found");
		return;
	}
	if (val==true){
	RadioElement.click()};
}

function SelectCheckBox(CheckBoxElement_selector, val) {}

function ClickButton(ButtonElement_selector) {}


function extractNameFromCancellationNotice() {
	// Get the first <td> with colspan="2" in the table with class 'borderlessTable'
	var targetTd = document.getElementsByName('Web Page')[0].contentWindow.document.querySelector('.borderlessTable');
	if (targetTd) {
		// Define the regular expression to match the pattern "To cancel {Name},"
		// This regex looks for 'To cancel ', then captures anything until it hits a comma or " and family"
		var regex = /To cancel (.*?)(?:,| and family)/;
		var text = targetTd.textContent; // Get the text content of the td element
		var match = regex.exec(text); // Execute the regex on the text

		if (match && match[1]) {
			// If a match is found and has the expected group (name)
			console.log('Extracted Name:', match[1].trim()); // Trim any leading/trailing whitespace
			return match[1].trim(); // Return the extracted name
		} else {
			console.log('No name matching the pattern was found.');
			return null;
		}
	} else {
		console.log('No target <td> with colspan="2" was found.');
		return null;
	}
}

function if_dept() {
	// Get the first table with the class 'details'
	var firstTable = document.querySelector('#launchpad > div.centerdetails1.modify > div > div > div.roundedtl > div.float_left > table');

	// Check if the table exists
	if (firstTable) {
		var rows = firstTable.getElementsByTagName('tr');
		var hasDependentID = false;

		// Loop through each row to check if the key contains "Dependent ID"
		for (var i = 0; i < rows.length; i++) {
			var key = rows[i].cells[0].innerText.trim(); // Get the text and trim any extra white space
			if (key.includes("Dependent ID")) {
				hasDependentID = true;
				break; // Stop searching once "Dependent ID" is found
			}
		}
		return hasDependentID
		// Log whether "Dependent ID" is found
		console.log('Does the first table contain "Dependent ID"?', hasDependentID);
	} else {
		return hasDependentID
		console.log('No table with class \'details\' was found.');
	}
}



function get_current_page(jsonobj) {
	var current_page = null;
	var current_page_Fields = null;
	for (let i = 0; i < jsonobj.length; i++) {
		const page = jsonobj[i];
		console.log(page);
		// Flag to indicate whether to break the outer loop

		let breakOuterLoop = true;

		for (let j = 0; j < page.PageIndicator.length; j++) {

			let indicator_Match = false;

			const indicator = page.PageIndicator[j];
			let indicatorSelector = indicator.Selector;
			let indicatorValue = indicator.Value;
			let indicatorLayer = indicator.Layer;


			if (indicatorLayer) {
				var current_doc = eval(indicatorLayer);
				if (current_doc == null) {
					var current_doc = document
				}
				// Now you can use `layer` as a base for further DOM queries
			} else {
				var current_doc = document
			}



			console.log("page.PageIndicator[j]", "|", evaluateKey(indicatorSelector), "|", indicatorValue, "|", indicator.Type)

			if (typeof(indicatorSelector) == 'boolean') {
				console.log("here is boolean line", "|", indicatorSelector, "|", indicatorValue, "|", indicator.Type);
				if (indicatorSelector == indicatorValue) {
					indicator_Match = true
				}
			} else if (indicatorSelector.startsWith("#") || indicatorSelector.startsWith("[")) {

				console.log('indicatorSelector.startsWith("# or [")');

				if (current_doc.querySelector(indicatorSelector) == null) {
					console.log('if selector is null:', current_doc.querySelector(indicatorSelector) == null)
					indicator_Match = false
				} else {
					if (indicator.Type === 'trimValue') {

						indicator_ElementOnPage = current_doc.querySelector(indicatorSelector)

						indicator_valueOnPage = indicator_ElementOnPage.textContent.trim();
						console.log("trimValue here is indicator_valueOnPage:", indicator_valueOnPage, "   ", "indicatorValue: ", indicatorValue, "      ", indicator_valueOnPage == indicatorValue)
						if (indicator_valueOnPage == indicatorValue) {
							indicator_Match = true;
							console.log(indicator_Match);
						}
					} else if (indicator.Type === 'Exists') {

						console.log("Exists here is indicatorSelector:", indicatorSelector, "   ", current_doc.querySelector(indicatorSelector))
						if (current_doc.querySelector(indicatorSelector) != null) {
							indicator_Match = true;
							console.log(indicator_Match);
						}
					} else if (indicator.Type === 'Value') {
						indicator_valueOnPage = current_doc.querySelector(indicatorSelector).value;
						console.log("here is indicator_valueOnPage:", indicator_valueOnPage, indicatorValue)

						if (indicator_valueOnPage == indicatorValue) {
							indicator_Match = true;
						}
					}
				}
			} else if (indicatorSelector.endsWith("()")) {
				if (indicator.Type === 'Value') {

					indicator_valueOnPage = evaluateKey(indicatorSelector);
					console.log("here is indicator_valueOnPage:", indicator_valueOnPage, indicatorValue)

					if (indicator_valueOnPage == indicatorValue) {
						indicator_Match = true;
					}
				}

			}

			// Check if the indicator's Value matches the target value
			if (indicator_Match == false) {
				breakOuterLoop = false;
				console.log("Page indicator failed to found, breaking current page's indicator's loop.", j);
				break; // move to next page loop, stop check current page indicator
			} else {
				// breakOuterLoop = true;
				console.log("indicator_Match： ", indicator_Match);
			}
		}

		if (breakOuterLoop == true) {
			var current_page = page.PageName;
			var current_page_Fields = page.Fields;
			break;
			//console.log("current_page： ", page.PageName);
		} //else{continue}

	}
	return [current_page, current_page_Fields]

}

function enter_per_JSON(Fields) {
	Fields.forEach(field => {
		if (field.FieldsType === "Input") {
			InputValue(field.Selector, field.Value,field.Layer);
			console.log(`Input set for ${field.Selector}, value is ${field.Value}`);
		} else if (field.FieldsType === "Select") {
			SelectOptionByText(field.Selector, field.Value,field.Layer);
			console.log(`Selection made for ${field.Selector}, value is ${field.Value}`);
		} else if (field.FieldsType === "RadioButton") {
			SelectRadioButton(field.Selector, field.Value,field.Layer);
			console.log(`RadioButton value made for ${field.Selector}, value is ${field.Value}`);
		} else if (field.FieldsType === "CheckBox") {
			InputValue(field.Selector, field.Value,field.Layer);
			console.log(`CheckBox value made for ${field.Selector}, value is ${field.Value}`);
		} else if (field.FieldsType === "Button") {
			InputValue(field.Selector, field.Value,field.Layer);
			console.log(`CheckBox value made for ${field.Selector}, value is ${field.Value}`);
		}

	});
}


const page_res = get_current_page(jsonobj);

console.log("Current Page: ", page_res[0], " Page Field: ", page_res[1])


enter_per_JSON(page_res[1])