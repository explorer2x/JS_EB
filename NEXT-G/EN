javascript: function delay(n) {
	return new Promise(function(resolve) {
		setTimeout(resolve, n * delay_second * 300);
	});
}
async function get_call(url, uid) {
	await delay(1);
	console.log('now fetching ' + url);
	try {
		var response = await fetch(url, {
			headers: {
				'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
				'Referer': 'https://' + document.domain + '/benefits/Hris/Employee/Manage?empId=' + uid
			}
		});
		if (!response.ok) {
			throw new Error('Network response was not ok');
		}
		console.log('fetch finished');
		return await response.text();
	} catch (error) {
		console.error('There was a problem with the fetch operation:', error);
	}
}
async function get_ee_job(ee_id) {
	async function get_datasheet(eeid) {
		const html_var = await get_call('https://' + document.domain + '/benefits/Hris/Employee/DataSheet?empId=' + ee_id, ee_id);
		var parser = new DOMParser();
		var doc = parser.parseFromString(html_var, 'text/html');
		var scriptTags = doc.getElementsByTagName('script');
		var token = null;
		var tokenRegex = /var token = '([A-F0-9]+)';/;
		for (var i = 0; i < scriptTags.length; i++) {
			var scriptContent = scriptTags[i].textContent || scriptTags[i].innerHTML;
			var match = tokenRegex.exec(scriptContent);
			if (match) {
				token = match[1];
				break;
			}
		}
		var fetch_url = 'https://' + document.domain + '/benefits/Hris/Employee/UpdateDataSheet?empId=' + eeid;
		data = {
			"empId": eeid,
			"enrollmentFilters": ["'current'", "'pending'", "'prior'", "'canceled'", "'removed'", "'open'"],
			"depEnrollmentFilters": ["'current'", "'pending'", "'open'", "'prior'", "'removed'", "'canceled'"]
		};
		try {
			const response = await fetch(fetch_url, {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
					'Accept': '*/*',
					'Entoken': token,
					'Referer': 'https://' + document.domain + '/benefits/Hris/Employee/DataSheet?empId=' + eeid,
				},
				body: JSON.stringify(data)
			});
			const responseData = await response.json();
			return (responseData.Directives.DataSheetModel);
		} catch (error) {
			console.error('Error:', error);
		}
	}
	async function get_Contact(ee_id) {
		const html_var = await get_call('https://' + document.domain + '/benefits/Hris/Manage/Contact?empId=' + ee_id);
		const eventsData = parse_phone_htmldata(html_var);
		return eventsData;

		function parse_phone_htmldata(html) {
			var parser = new DOMParser();
			var doc = parser.parseFromString(html, 'text/html');
			var scripts = Array.from(doc.querySelectorAll('script'));
			var scriptTag = scripts.find(script => script.textContent.includes('var model = {'));
			var eventsData;
			var scriptContent = scriptTag.textContent;
			var eventsRegex = /model = \s*([\s\S]*?\;)/;
			var matches = eventsRegex.exec(scriptContent);
			if (matches && matches[1]) {
				if (matches[1].endsWith(";")) {
					modifiedString = matches[1].slice(0, -1);
				} else {
					modifiedString = matches[1];
				}
				eventsData = JSON.parse(modifiedString);
			}
			const HomePhone = eventsData.Data.PhoneHome;
			const MobilePhone = eventsData.Data.PhoneMobile;
			const WorkPhone = eventsData.Data.PhoneWork;
			const WorkPhoneExt = eventsData.Data.PhoneWorkExt;
			const PersonalEmail = eventsData.Data.PersonalEmail;
			const WorkEmail = eventsData.Data.WorkEmail;
			const LkpPrimaryEmailType = convertEmailTypeId(eventsData);
			return {
				"Home Phone": HomePhone,
				"Mobile Phone": MobilePhone,
				"Work Phone": WorkPhone,
				"Work Phone Ext": WorkPhoneExt,
				"Work Email": WorkEmail,
				"Personal Email": PersonalEmail,
				"Primary Email Type": LkpPrimaryEmailType
			};

			function convertEmailTypeId(data) {
				const typeId = data.Data.LkpPrimaryEmailTypeId;
				if (!typeId) {
					return 'Unknown';
				}
				const lookupTable = data.Tables.LkpPrimaryEmailTypeId;
				const label = lookupTable.find(entry => entry.Value === typeId.toString());
				return label ? label.Label : 'Unknown';
			}
		}
	}
	var datasheet = await get_datasheet(ee_id);
	var ee_Contact = await get_Contact(ee_id);
	var ee_depts = [];
	var dept_enrollments = [];
	var ee_info = [];
	var ee_address = [];
	var ee_CafeEnrollments = [];
	var ee_Enrollments = [];
	var ee_EnrollmentChanges = [];
	if (datasheet) {
		if (datasheet.EmployeeData && datasheet.EmployeeData.Table) {
			var ee_info = datasheet.EmployeeData.Table;
		}
		if (datasheet.Dependents && datasheet.Dependents.Table) {
			var ee_depts = datasheet.Dependents.Table;
		}
		if (datasheet.EmployeeAddresses && datasheet.EmployeeAddresses.Table) {
			var ee_address = datasheet.EmployeeAddresses.Table;
		}
		if (datasheet.Enrollments) {
			var ee_Enrollments = datasheet.Enrollments;
		}
		if (datasheet.EnrollmentChanges) {
			var ee_EnrollmentChanges = datasheet.EnrollmentChanges;
		}
		if (datasheet.CafeEnrollments) {
			var ee_CafeEnrollments = datasheet.CafeEnrollments;
		}
		if (datasheet.DependentEnrollments) {
			var dept_enrollments = datasheet.DependentEnrollments;
		}
	} else {
		console.error("Datasheet data not found");
	}
	const result = {
		EmployeeDataSheet_EmployeeReview: ee_info,
		EmployeeDataSheet_Dependents: ee_depts,
		EmployeeDataSheet_EmployeeAddresses: ee_address,
		Profile_Contact: ee_Contact
	};
	return result;
}
async function job() {
	const urlParams = new URLSearchParams(window.location.search);
	const emp_ID = urlParams.get('empId');
	var ee_info = await get_ee_job(emp_ID);
	await write_clipboard(ee_info);
	alert('Done');
}
async function get_clipboard() {
	window.focus();
	document.body.focus();
	const clipboardText = await navigator.clipboard.readText();
	return (clipboardText);
}
async function write_clipboard(jsonObject) {
	window.focus();
	document.body.focus();
	let newClipboardString = JSON.stringify(jsonObject);
	await navigator.clipboard.writeText(newClipboardString);
}
var scriptTags = document.getElementsByTagName('script');
var token = null;
var tokenRegex = /var token = '([A-F0-9]+)';/;
for (var i = 0; i < scriptTags.length; i++) {
	var scriptContent = scriptTags[i].textContent || scriptTags[i].innerHTML;
	var match = tokenRegex.exec(scriptContent);
	if (match) {
		token = match[1];
		break;
	}
}
var delay_second = 0.5;
job()