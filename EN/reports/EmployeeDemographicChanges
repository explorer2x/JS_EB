function ExecuteScript() {
	function delay(n) {
		return new Promise(function(resolve) {
			setTimeout(resolve, n * 1000);
		});
	}


	async function get_IncludedFields(form_date, to_date) {

		await delay(5);


		var fetch_url = 'https://' + document.domain + `/benefits/Company/Reports/EmployeeDemographicChangesFields?FromDate=${encodeURIComponent(form_date)}&ToDate=${encodeURIComponent(to_date)}`
		console.log(fetch_url);
		try {
			var response = await fetch(fetch_url, {
				headers: {
					'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
				}
			});
			if (!response.ok) {
				throw new Error('Network response was not ok');
			}
			console.log('fetch finished');
			var htmldoc = await response.text();
			var parser = new DOMParser();
			var doc = parser.parseFromString(htmldoc, 'text/html');


			let keyValuePairs = [];
			let checkedFields = doc.querySelectorAll('input');
			let fieldNames = [];

			checkedFields.forEach(input => {
				let txt_var = input.parentElement.textContent.trim();
				if (!fieldNames.includes(txt_var)) {
					fieldNames.push(txt_var);
				}

			});
			return (fieldNames.slice(2));


		} catch (error) {
			console.error('There was a problem with the fetch operation:', error);
		}

	}

	async function get_GenerateEmployeeDemographicsCsv(form_date, to_date) {

		var scriptTags = document.getElementsByTagName('script');
		var token = null;
		var tokenRegex = /var token = '([A-F0-9]+)';/;
		for (var i = 0; i < scriptTags.length; i++) {
			var scriptContent = scriptTags[i].textContent || scriptTags[i].innerHTML;
			var match = tokenRegex.exec(scriptContent);
			if (match) {
				token = match[1];
				break;
			}
		}
		var ver_token = document.querySelector("input[name='__RequestVerificationToken']").value;

		let keyValuePairs = [];

		var feilds = await get_IncludedFields(form_date, to_date)

		keyValuePairs.push(['ENToken', token]);

		keyValuePairs.push(['FromDate', form_date]);
		keyValuePairs.push(['ToDate', to_date]);
		keyValuePairs.push(['OrderBy', '1']);
		keyValuePairs.push(['IncludedFields', feilds]);
		keyValuePairs.push(['selectAll', 'on']);

		keyValuePairs.push(['__RequestVerificationToken', ver_token]);


		console.log(keyValuePairs.map(pair => pair.join(': ')).join('\n'));



		await delay(5);
		var fetch_url = 'https://' + document.domain + '/benefits/Company/Reports/GenerateEmployeeDemographicsCsv';
		console.log(token);
		try {
			const params = new URLSearchParams(keyValuePairs);

			const response = await fetch(fetch_url, {
				method: 'POST',
				headers: {
					'Content-Type': 'application/x-www-form-urlencoded',
					'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
				},
				body: params
			});
			const responseData = await response.text();
			return responseData;
		} catch (error) {
			console.error('Error:', error);
		}
	}



	async function Job() {
		var form_date = "12/30/2023";
		var to_date = "01/30/2024";
		var csv_str = await get_GenerateEmployeeDemographicsCsv(form_date, to_date);
		console.log(csv_str);

		const textarea = document.createElement('textarea');
		textarea.id = "mycsv";
		textarea.value = csv_str;
		document.body.appendChild(textarea);
		var csvstrElement = document.getElementById("mycsv");
		console.log(csvstrElement);
		console.log("Length of textContent:", csvstrElement.value.length);
	}

	Job();
}
